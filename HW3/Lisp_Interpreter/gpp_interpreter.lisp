(load "gpp_lexer.lisp")

(defvar *filename* "asd.txt")

(defparameter *identifiers* '())
(defparameter *values* '())

(defun print_value (identifier)
    (format t "~d ~d ~d~%" identifier (nth 0 *identifiers*) "asd")
    (if (position identifier *identifiers*)
        (format t "~d ~%" (nth (position identifier *identifiers*) *values*))
    )
)

(defun print_list (elements)
    (cond
        ((null elements) '())
        (t
            (if (equal (length elements) 1)
                (format t "~d" (car elements))
                (format t "~d " (car elements))
            )
            (print_list (cdr elements))
        )
    )
)

(defun my_parser (mylist)
    ;(format t "~d ~%" mylist)
    (if (tokenCheck 0 mylist "COMMENT")
        ()
    )
    (if (tokenCheck 0 mylist "EXIT")
        (exit)
    )
    (if (tokenCheck 0 mylist "VALUE")
        (format t "~d ~%" (nth 0 *list*))
    )
    (if (tokenCheck 0 mylist "IDENTIFIER")
        (print_value (nth 0 *list*))
    )
    (if (tokenCheck 0 mylist "KW_TRUE")
        (format t "~d ~%" "true")
    )
    (if (tokenCheck 0 mylist "KW_FALSE")
        (format t "~d ~%" "false")
    )
    (if (tokenCheck 0 mylist "OP_OP")
        (progn
            (if (tokenCheck 1 mylist "EXIT")
                (exit)
            )
            (if (tokenCheck 1 mylist "OP_PLUS")
                (progn
                    (if (and (tokenCheck 2 mylist "VALUE") (tokenCheck 3 mylist "VALUE"))
                        (format t "~d ~%" (+ (parse-integer (nth 4 *list*)) (parse-integer (nth 5 *list*))))
                    )
                )
            )
            (if (tokenCheck 1 mylist "OP_MINUS")
                (progn
                    (if (and (tokenCheck 2 mylist "VALUE") (tokenCheck 3 mylist "VALUE"))
                        (format t "~d ~%" (- (parse-integer (nth 4 *list*)) (parse-integer (nth 5 *list*))))
                    )
                )
            )
            (if (tokenCheck 1 mylist "OP_MULT")
                (progn
                    (if (and (tokenCheck 2 mylist "VALUE") (tokenCheck 3 mylist "VALUE"))
                        (format t "~d ~%" (* (parse-integer (nth 4 *list*)) (parse-integer (nth 5 *list*))))
                    )
                )
            )
            (if (tokenCheck 1 mylist "OP_DIV")
                (progn
                    (if (and (tokenCheck 2 mylist "VALUE") (tokenCheck 3 mylist "VALUE"))
                        (format t "~d ~%" (/ (parse-integer (nth 4 *list*)) (parse-integer (nth 5 *list*))))
                    )
                )
            )
            (if (tokenCheck 1 mylist "OP_DBMULT")
                (progn
                    (if (and (tokenCheck 2 mylist "VALUE") (tokenCheck 3 mylist "VALUE"))
                        (format t "~d ~%" (** (parse-integer (nth 4 *list*)) (parse-integer (nth 5 *list*))))
                    )
                )
            )
            (if (tokenCheck 1 mylist "KW_SET")
                (if (tokenCheck 2 mylist "IDENTIFIER")
                    (progn
                        (push (nth 2 *list*) *identifiers*)
                        (push (nth 3 *list*) *values*)
                        (print_value (nth 2 *list*))
                    )
                )
            )
            ;(if (string= (nth 1 mylist) "KW_SET"))
            ;(if (string= (nth 1 mylist) "KW_IF"))
            (if (tokenCheck 1 mylist "KW_EQUAL")
                (progn
                    (if (and (tokenCheck 2 mylist "VALUE") (tokenCheck 3 mylist "VALUE"))
                        (if (equal (parse-integer (nth 2 *list*)) (parse-integer (nth 3 *list*)))
                            (format t "~d ~%" "true")
                            (format t "~d ~%" "false")
                        )
                    )
                    (if (and (tokenCheck 2 mylist "KW_TRUE") (tokenCheck 3 mylist "KW_TRUE"))
                        (format t "~d ~%" "true")
                    )
                    (if (and (tokenCheck 2 mylist "KW_TRUE") (tokenCheck 3 mylist "KW_FALSE"))
                        (format t "~d ~%" "false")
                    )
                    (if (and (tokenCheck 2 mylist "KW_FALSE") (tokenCheck 3 mylist "KW-TRUE"))
                        (format t "~d ~%" "false")
                    )
                    (if (and (tokenCheck 2 mylist "KW_FALSE") (tokenCheck 3 mylist "KW_FALSE"))
                        (format t "~d ~%" "true")
                    )
                )
            )
            (if (tokenCheck 1 mylist "KW_LESS")
                (if (and (tokenCheck 2 mylist "VALUE") (tokenCheck 3 mylist "VALUE"))
                    (if (< (parse-integer (nth 2 *list*)) (parse-integer (nth 3 *list*)))
                        (format t "~d ~%" "true")
                        (format t "~d ~%" "false")
                    )
                )
            )
            (if (tokenCheck 1 mylist "KW_AND")
                (progn
                    (if (and (tokenCheck 2 mylist "KW_TRUE") (tokenCheck 3 mylist "KW_TRUE"))
                        (format t "~d ~%" "true")
                        (format t "~d ~%" "false")
                    )
                )
            )
            (if (tokenCheck 1 mylist "KW_OR")
                (progn
                    (if (and (tokenCheck 2 mylist "KW_FALSE") (tokenCheck 3 mylist "KW_FALSE"))
                        (format t "~d ~%" "false")
                        (format t "~d ~%" "true")
                    )
                )
            )
            (if (tokenCheck 1 mylist "KW_NOT")
                (progn
                    (if (tokenCheck 2 mylist "KW_TRUE")
                        (format t "~d ~%" "false")
                        (format t "~d ~%" "true")
                    )
                )
            )
            (if (tokenCheck 1 mylist "KW_DISP")
                (progn
                    (if (tokenCheck 2 mylist "KW_TRUE")
                        (format t "~d ~%" "true")
                    )
                    (if (tokenCheck 2 mylist "KW_FALSE")
                        (format t "~d ~%" "false")
                    )
                    (if (tokenCheck 2 mylist "VALUE")
                        (if (tokenCheck 3 mylist "VALUE")
                            (if (tokenCheck 4 mylist "VALUE")
                                (if (tokenCheck 5 mylist "VALUE")
                                    (if (tokenCheck 6 mylist "VALUE")
                                        ()
                                        (format t "~d ~d ~d ~d ~%" (nth 2 *list*) (nth 3 *list*) (nth 4 *list*) (nth 5 *list*))
                                    )
                                    (format t "~d ~d ~d ~%" (nth 2 *list*) (nth 3 *list*) (nth 4 *list*))
                                )
                                (format t "~d ~d ~%" (nth 2 *list*) (nth 3 *list*))
                            )
                            (format t "~d ~%" (nth 2 *list*))
                        )
                    )
                    (tokenCheckIf 2 4 mylist "LIST")
                )
            )
            (if (tokenCheck 1 mylist "KW_APPEND")
                (if (tokenCheck 2 mylist "VALUE")
                    (if (tokenCheck 3 mylist "VALUE")
                        (if (tokenCheck 4 mylist "VALUE")
                            (if (tokenCheck 5 mylist "VALUE")
                                ()
                                (progn
                                    (tokenCheckIf 5 7 mylist "APPEND")
                                    (format t " ~d ~d ~d) ~%" (nth 2 *list*) (nth 3 *list*) (nth 4 *list*))
                                )
                            )
                            (progn
                                (tokenCheckIf 4 6 mylist "APPEND")
                                (format t " ~d ~d) ~%" (nth 2 *list*) (nth 3 *list*))
                            )
                        )
                        (progn
                            (tokenCheckIf 3 5 mylist "APPEND")
                            (format t " ~d) ~%" (nth 2 *list*))
                        )
                    )
                )
            )
            (if (tokenCheck 1 mylist "KW_CONCAT")
                ()
            )
        )
        ;;(format t "~d ~%" "bc")
    )
    (if (string= (nth 0 mylist) "KW_NIL")
        (format t "~d ~%" "nil")
    )
    (tokenCheckIf 0 2 mylist "LIST")
)

(defun checkMod (list1 str)
    (if (string= str "APPEND")
        (progn
            (format t "(")
            (print_list list1)
        )
    )
    (if (string= str "CONCAT")
        ()
    )
    (if (string= str "LIST")
        (progn
            (format t "(")
            (print_list list1)
            (format t ") ~%")
        )
    )
)

(defun tokenCheck (number element dst)
    (string= (nth number element) dst)
)

(defun tokenCheckIf (number1 number2 element mod)
    (if (tokenCheck number1 element "OP_OP")
        (if (tokenCheck (+ number1 1) element "KW_LIST")
            (if (string= (nth (+ number1 2) element) "VALUE")
                (if (string= (nth (+ number1 3) element) "VALUE")
                    (if (string= (nth (+ number1 4) element) "VALUE")
                        (if (string= (nth (+ number1 5) element) "VALUE")
                            (if (string= (nth (+ number1 6) element) "VALUE")
                                (if (string= (nth (+ number1 7) element) "VALUE")
                                    (if (string= (nth (+ number1 8) element) "VALUE")
                                        (if (string= (nth (+ number1 9) element) "VALUE")
                                            (if (string= (nth (+ number1 10) element) "VALUE")
                                                ()
                                                (progn 
                                                    (setf dd (list (nth number2 *list*) (nth (+ number2 1) *list*) (nth (+ number2 2) *list*) (nth (+ number2 3) *list*) (nth (+ number2 4) *list*) (nth (+ number2 5) *list*) (nth (+ number2 6) *list*) (nth (+ number2 7) *list*)))
                                                    (checkMod dd mod)
                                                )
                                            )
                                            (progn
                                                (setf dd (list (nth number2 *list*) (nth (+ number2 1) *list*) (nth (+ number2 2) *list*) (nth (+ number2 3) *list*) (nth (+ number2 4) *list*) (nth (+ number2 5) *list*) (nth (+ number2 6) *list*)))
                                                (checkMod dd mod)
                                            )
                                        )
                                        (progn
                                            (setf dd (list (nth number2 *list*) (nth (+ number2 1) *list*) (nth (+ number2 2) *list*) (nth (+ number2 3) *list*) (nth (+ number2 4) *list*) (nth (+ number2 5) *list*)))
                                            (checkMod dd mod)
                                        )
                                    )
                                    (progn
                                        (setf dd (list (nth number2 *list*) (nth (+ number2 1) *list*) (nth (+ number2 2) *list*) (nth (+ number2 3) *list*) (nth (+ number2 4) *list*)))
                                        (checkMod dd mod)
                                    )
                                )
                                (progn
                                    (setf dd (list (nth number2 *list*) (nth (+ number2 1) *list*) (nth (+ number2 2) *list*) (nth (+ number2 3) *list*)))
                                    (checkMod dd mod)
                                )
                            )
                            (progn
                                (setf dd (list (nth number2 *list*) (nth (+ number2 1) *list*) (nth (+ number2 2) *list*)))
                                (checkMod dd mod)
                            )
                        )
                        (progn
                            (setf dd (list (nth number2 *list*) (nth (+ number2 1) *list*)))
                            (checkMod dd mod)
                        )
                    )
                    (progn
                        (setf dd (list (nth number2 *list*)))
                        (checkMod dd mod)
                    )
                )
                (format t "~d ~%" "()")
            )
        )
    )
)

(defun lexer (*filename* *args*)
    (with-open-file (my-stream 
        *filename*
        :direction :output
        :if-does-not-exist :create
        :if-exists :supersede)

        (if (equal *args* NIL) 
            (progn
                (loop
                    do 
                    (defparameter *my-string* (read-line))
                    (setf *mylist* (check *my-string* my-stream))
                    (setf *mylist* (nth 0 *mylist*))
                    ;;(format t "~d ~%" *mylist*)
                    (my_parser *mylist*)
                )
            )
            (progn
                (let ((in (open *args* :if-does-not-exist nil)))
                    (when in
                        (loop for line = (read-line in nil)
                            while line 
                                do (setf *mylist* (check line my-stream))
                                (setf *mylist* (nth 0 *mylist*))
                                ;;(format t "~d ~%" *mylist*)
                                (my_parser *mylist*)
                        )
                        (close in)
                    )
                )
            )
        )
    )
)

(lexer *filename* (nth 0 *args*))

